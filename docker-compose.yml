version: '3'

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
     traefik:
       ipv4_address: 172.40.0.10

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    volumes:
     - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    links:
    - traefik
    networks:
     traefik:
       ipv4_address: 172.40.0.90
    ports:
     - 9090:9090

  grafana:
    image: grafana/grafana:latest
    volumes:
    # persistency
    # grafana/data;sudo chown -R 472:472 grafana/data
    - ./grafana/data:/var/lib/grafana
    env_file:
    - ./grafana/config.env 
    links:
    - prometheus
    networks:
     traefik:
       ipv4_address: 172.40.0.100
    ports:
     - 3000:3000


  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:latest
    container_name: zipkin
    environment:
      - STORAGE_TYPE=mem
      - MYSQL_HOST=mysql
      - SELF_TRACING_ENABLED=true
    networks:
     traefik:
       ipv4_address: 172.40.0.38
    ports:
      - 9411:9411

  app1:
      hostname: app1
      image: nightmareze1/nginx:v0.0.19
      labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app1.rule=Host(`app1.com`)"
      - "traefik.http.routers.app1.entrypoints=web"
      networks:
       traefik:
        ipv4_address: 172.40.0.20

  app2:
      hostname: app2
      image: nightmareze1/nginx:v0.0.272
      labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app2.rule=Host(`app2.com`)"
      - "traefik.http.routers.app2.entrypoints=web"
      networks:
       traefik:
        ipv4_address: 172.40.0.21

networks:
 traefik:
  driver: bridge
  ipam:
    config:
    - subnet: 172.40.0.0/24
